@{
    ViewBag.Title = "Home Page";
    ViewBag.PageId = "index";
}

@section scripts {
    <script type="text/javascript">
        app.viewModels.indexViewModel.init();
        ko.applyBindings(app.viewModels.indexViewModel);
    </script>
}

@section featured {
    <section class="featured">
        <div class="content-wrapper">
            <p>
                This code sample demostrates a basic RESTful CRUD application.  It allows you to create "Pages".  The Page model is a simple POCO object, with just 3 properties; Id, Title, and Content. In the interest of time, there is no persistence aside from a static class to hold the data.  It uses the following technologies at a very basic level:
            </p>

            <ul>
                <li>ASP.NET MVC 4</li>
                <li>ASP.NET Web API</li>
                <li>JavaScript</li>
                <li>KnockoutJS</li>
                <li>Knockout Validation</li>
                <li>jQuery</li>
                <li>jQueryUI</li>
            </ul>

            <p>
                It should be noted, that this my main constraint was time.  Instead of bringing back the server side ModelState errors, I have brought them back using "Toast".
            </p>
        </div>
    </section>
}

<h3>Pages<a href="#"><span class="ui-icon ui-icon-plus" data-bind="click: addPage"></span></a></h3>

<ul class="simpleList">
    <li data-bind="ifnot: pages().length > 0">No pages.</li>
    <!-- ko foreach: pages -->
    <li><span data-bind="text: Title"></span><a href="#" data-bind="click: $root.editPage"><span class="ui-icon ui-icon-pencil"></span></a><a href="#" data-bind="click: $root.deletePage"><span class="ui-icon ui-icon-trash"></span></a></li>
    <!-- /ko -->
</ul>

<div style="display: none" data-bind="jqDialog: { autoOpen: false, modal: true, resizable: false, width: '600px', buttons: { 'Save': $root.savePage, 'Cancel': $root.cancelEdit } }, openDialog: selectedPage, template: { name: 'pageEditor', data: selectedPage, if: selectedPage }">
</div>

<script type="text/html" id="pageEditor">
    <div>
        <label><span>Title</span>
            <input type="text" data-bind="value: Title" />
        </label>
    </div>
    <div>
        <label><span>Content</span>
            <textarea data-bind="value: Content"></textarea>
        </label>
    </div>
</script>